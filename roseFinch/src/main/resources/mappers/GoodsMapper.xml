<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.web.rosefinch.mapper.goodsMapper">

	<resultMap id="goodsVO" type="com.web.rosefinch.goods.vo.GoodsVO">
		<result property="code" column="GDS_CODE" />
		<result property="imgUrl" column="GDS_IMG_URL" />
		<result property="categoryCode" column="CAT_CODE" />
		<result property="categoryName" column="CAT_NAME" />
		<result property="sellerCode" column="SEL_CODE" />
		<result property="sellerName" column="SEL_NAME" />
		<result property="name" column="GDS_NAME" />
		<result property="company" column="GDS_COMPANY" />
		<result property="madeby" column="GDS_MADEBY" />
		<result property="price" column="GDS_PRICE" />
		<result property="count" column="GDS_CNT" />
		<result property="sellYesOrNo" column="GDS_SEL_YN" />
		<result property="hit" column="GDS_HIT" />
		<result property="startDate" column="GDS_STR_DATE" />
		<result property="modifyDate" column="GDS_MOD_DATE" />
	</resultMap>

	<insert id="seller_Productregistration">
		insert into goods values (#{gds_code}, #{cat_code}, #{sel_code}, #{gds_name}, #{gds_company}, #{gds_madeby}, #{gds_price}, #{gds_cnt}, #{gds_sel_yn}, #{gds_hit}, #{gds_str_date}, #{gds_mod_date})
	</insert>

	<insert id="seller_Productregistration_img">
		insert into goods_images values (#{gds_img_code}, #{gds_code}, #{gds_img_name}, #{gds_img_url}, #{gds_img_seq})
	</insert>

	<!-- 신상품 조회 -->
	<select id="getNewGoodsList" resultMap="goodsVO" parameterType="com.web.rosefinch.goods.vo.FilterVO">		
		SELECT		g.*,
					c.cat_name, 
					s.sel_name,
					IFNULL(i.gds_img_url, NULL) AS "gds_img_url"
		FROM		goods g
		INNER JOIN	category c 
		ON			g.cat_code = c.cat_code
		INNER JOIN	goods_images i
		ON			g.gds_code = i.gds_code
		INNER JOIN	seller s 
		ON			g.sel_code = s.sel_code
		WHERE		i.gds_img_seq = 1
					AND g.cat_code IN (
					#재귀과정을 통해서, 특정 카테고리의 후손 카테고리 조회 (결과 중복X)
					WITH recursive cte (cat_code, cat_name, cat_par_code) AS
					(
						SELECT		cat_code,
									cat_name,
									cat_par_code
						FROM		category
						WHERE		cat_par_code = #{catCode}
									OR cat_code = #{catCode}
						UNION
						SELECT		p.cat_code,
									p.cat_name,
									p.cat_par_code
						FROM		category p
						INNER JOIN	cte 
		                ON			p.cat_par_code = cte.cat_code
					)
					SELECT	cat_code 
		            FROM	cte
					)
		ORDER BY	g.gds_code DESC
		LIMIT		100
	</select>
	
	<!-- 베스트 상품 조회 -->
	<select id="getBestGoodsList" resultMap="goodsVO" parameterType="com.web.rosefinch.goods.vo.FilterVO">
		SELECT		g.*,
					c.cat_name, 
					s.sel_name,
					IFNULL(i.gds_img_url, NULL) AS "gds_img_url"
		FROM		goods g
		INNER JOIN	category c 
		ON			g.cat_code = c.cat_code
		INNER JOIN	goods_images i
		ON			g.gds_code = i.gds_code
		INNER JOIN	seller s 
		ON			g.sel_code = s.sel_code
		WHERE		i.gds_img_seq = 1
					AND g.cat_code IN (
					#재귀과정을 통해서, 특정 카테고리의 후손 카테고리 조회 (결과 중복X)
					WITH recursive cte (cat_code, cat_name, cat_par_code) AS
					(
						SELECT		cat_code,
									cat_name,
									cat_par_code
						FROM		category
						WHERE		cat_par_code = #{catCode}
						UNION
						SELECT		p.cat_code,
									p.cat_name,
									p.cat_par_code
						FROM		category p
						INNER JOIN	cte 
				        ON			p.cat_par_code = cte.cat_code
					)
					SELECT	cat_code 
					FROM	cte
					)
		ORDER BY	g.gds_hit DESC,	
					g.gds_code DESC
		LIMIT		100
	</select>
	
	<!-- 필터가 적용된 상품 조회 -->
	<select id="getGoodsInvokedFilter" resultMap="goodsVO" parameterType="com.web.rosefinch.goods.vo.FilterVO">
		SELECT		g.*,
					c.cat_name, 
					s.sel_name,
					IFNULL(i.gds_img_url, NULL) AS "gds_img_url"
		FROM		goods g
		INNER JOIN	category c 
		ON			g.cat_code = c.cat_code
		INNER JOIN	goods_images i
		ON			g.gds_code = i.gds_code
		INNER JOIN	seller s 
		ON			g.sel_code = s.sel_code
		WHERE		i.gds_img_seq = 1
					<if test="keyword != null">
					AND g.gds_name LIKE CONCAT("%", #{keyword} ,"%")
					</if>
					<if test="priceRange != null">
				    AND g.gds_price BETWEEN #{priceRange[0]} AND #{priceRange[1]}
				    </if>
				    <if test="company != null">
				    AND g.gds_company IN
				    <foreach collection="company" item="com" open="(" close=")" separator=",">
				    	#{com}
				    </foreach>
				    </if>
					AND g.cat_code IN (
					#재귀과정을 통해서, 특정 카테고리의 본인을 포함한 하위 카테고리 조회
					WITH recursive cte (cat_code, cat_name, cat_par_code) AS
					(
						SELECT		cat_code,
									cat_name,
									cat_par_code
						FROM		category
						WHERE		cat_par_code = #{catCode}
									XOR cat_code = #{catCode} 
						UNION
						SELECT		p.cat_code,
									p.cat_name,
									p.cat_par_code
						FROM		category p
						INNER JOIN	cte
		                ON			p.cat_par_code = cte.cat_code
					)
					SELECT	cat_code
		            FROM	cte
					)
	</select>
	
	<!-- 필터가 적용된 브랜드 조회 -->
	<select id="getCompanyInvokedFilter" resultType="hashmap" parameterType="int">
		SELECT		g.gds_company
		FROM		goods g
		WHERE		g.cat_code IN (
					#재귀과정을 통해서, 특정 카테고리의 본인을 포함한 하위 카테고리 조회
					WITH recursive cte (cat_code, cat_name, cat_par_code) AS
					(
						SELECT		cat_code,
									cat_name,
									cat_par_code
						FROM		category
						WHERE		cat_par_code = #{catCode}
									XOR cat_code = #{catCode} 
						UNION
						SELECT		p.cat_code,
									p.cat_name,
									p.cat_par_code
						FROM		category p
						INNER JOIN	cte
		                ON			p.cat_par_code = cte.cat_code
					)
					SELECT	cat_code
		            FROM	cte
					)
	</select>
</mapper>